package a03b.e1;

import java.util.ArrayList;
import java.util.List;
import java.util.function.BiFunction;
import java.util.function.Function;

/**
 * An interface to model several factories of Lenses, with many opportunities of reuse,
 * especially if one considers the idea of "composing lenses"
 *
 */
public class LensFactoryImpl implements LensFactory {

	/**
	 * @param <E>
	 * @param i
	 * @return a lens over the i-th element of a List<E>
	 */
	@Override
	public <E> Lens<List<E>, E> indexer(int i) {
		return new Lens<List<E>, E>(){
			int index = i;
			
			@Override
			public E get(List<E> s) {
				return s.get(index);
			}

			@Override
			public List<E> set(E a, List<E> s) {
				ArrayList<E> list = new ArrayList<>(s);
				list.remove(index);
				list.add(index, a);
//				s.remove(i+1);
				
				return list;
			}
			
		};
	}

	/**
	 * @param <E>
	 * @param i
	 * @param i
	 * @return a lens of i-th row and j-th column of a List<List<E>>
	 */
	@Override
	public <E> Lens<List<List<E>>, E> doubleIndexer(int i, int j) {
		return new Lens<List<List<E>>, E>() {

			@Override
			public E get(List<List<E>> s) {
				ArrayList<List<E>> list = new ArrayList<List<E>>(s);
				return list.get(i).get(j);
			}

			@Override
			public List<List<E>> set(E a, List<List<E>> s) {
				ArrayList<List<E>> list = new ArrayList<List<E>>(s);
				ArrayList<E> sublist = new ArrayList<E>(list.get(i));
				sublist.set(j, a);
				list.set(i, sublist);
				return list;
			}
		};
	}

	/**
	 * @param <A>
	 * @param <B>
	 * @return a lens over the first component of a pair
	 */
	@Override
	public <A, B> Lens<Pair<A, B>, A> left() {
		return new Lens<Pair<A,B>, A>(){

			@Override
			public A get(Pair<A, B> s) {
				return s.get1();
			}

			@Override
			public Pair<A, B> set(A a, Pair<A, B> s) {
				Pair<A, B> pair = new Pair<A, B>(a, s.get2());
				return pair;
			}
			
		};
	}

	/**
	 * @param <A>
	 * @param <B>
	 * @return a lens over the second component of a pair
	 */
	@Override
	public <A, B> Lens<Pair<A, B>, B> right() {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * @param <A>
	 * @param <B>
	 * @param <C>
	 * @param i
	 * @return a lens over the second component of the second component of the i-th element of a List<Pair<A,Pair<B,C>>> 
	 */
	@Override
	public <A, B, C> Lens<List<Pair<A, Pair<B, C>>>, C> rightRightAtPos(int i) {
		// TODO Auto-generated method stub
		return null;
	}

}
