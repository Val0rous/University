-- *********************************************
-- * SQL MySQL generation                      
-- *--------------------------------------------
-- * DB-MAIN version: 11.0.2              
-- * Generator date: Sep 14 2021              
-- * Generation date: Fri Jun  3 10:33:27 2022 
-- * LUN file: C:\Users\fabbr\OneDrive\Documenti\Università\anno_2\Basi di dati\Elaborato\DATABASE_PROJECT_rel.lun 
-- * Schema: GESTIONALE_PER_AGENZIE_Rel/1-1-1 
-- ********************************************* 


-- Database Section
-- ________________ 

create database GESTIONALE_PER_AGENZIE;
use GESTIONALE_PER_AGENZIE;


-- Tables Section
-- _____________ 

create table ACCESSORIO (
     Tipologia varchar(30) not null,
     UltimoControllo date not null,
     Produttore varchar(30) not null,
     Taglia char(1),
     IDaccessorio char(1) not null,
     IDmagazzino char(1) not null,
     constraint IDACCESSORI primary key (IDaccessorio));

create table Acquisto biglietto (
     PIVA char(1) not null,
     IDtour char(1) not null,
     constraint IDAcquisto biglietto primary key (IDtour, PIVA));

create table AGENZIA (
     PIVA -- Compound attribute -- not null,
     Nome char(1) not null,
     #Tot dipendenti char(1) not null,
     constraint IDAGENZIA_ID primary key (PIVA -- Compound attribute --));

create table ATTRAZIONE (
     Recapito char(1) not null,
     Via char(1) not null,
     NomeSocio char(1) not null,
     PIVA char(1) not null,
     CostoServizio char(1) not null,
     TipoAttrazione char(1) not null,
     EtàMinima char(1) not null,
     constraint IDBUSINESS PARTNER_ID primary key (PIVA));

create table BICICLETTA (
     Produttore char(1) not null,
     #Telaio char(1) not null,
     Taglia char(1) not null,
     RaggioRuota char(1) not null,
     Tipologia char(1) not null,
     UltimoControllo -- Compound attribute -- not null,
     #RapportiAnteriori char(1) not null,
     #RapportiPosteriori char(1) not null,
     isElettrica char(1) not null,
     PotenzaBatteria char(1),
     CapacitàBatteria char(1),
     DurataBatteria char(1),
     IDmagazzino char(1) not null,
     constraint IDBICICLETTE primary key (#Telaio));

create table CLIENTE (
     Nome char(1) not null,
     Cognome char(1) not null,
     CF char(1) not null,
     #Telefono char(1) not null,
     constraint IDCLIENTE primary key (CF));

create table DIPENDENTE (
     Nome char(1) not null,
     Cognome char(1) not null,
     CF char(1) not null,
     #Telefono char(1) not null,
     CodiceDipendente char(1) not null,
     Stipendio -- Compound attribute -- not null,
     isGuida char(1) not null,
     isTourManager char(1) not null,
     isAltro char(1) not null,
     IDsede char(1) not null,
     constraint IDDIPENDENTE primary key (CF),
     constraint IDDIPENDENTE_1 unique (CodiceDipendente));

create table Gerarchia (
     CFsottoposto char(1) not null,
     CFsuperiore char(1),
     constraint IDGerarchia primary key (CFsottoposto));

create table INDIRIZZO (
     #Civico char(1) not null,
     Via char(1) not null,
     CAP char(1) not null,
     Paese char(1) not null,
     IDIndirizzo char(1) not null,
     constraint IDINDIRIZZO_ID primary key (IDIndirizzo));

create table MAGAZZINO (
     CapienzaMassimaAccessori char(1) not null,
     CapienzaMassimaBici char(1) not null,
     IDmagazzino char(1) not null,
     IDIndirizzo char(1) not null,
     IDsede char(1) not null,
     constraint IDMAGAZZINO primary key (IDmagazzino),
     constraint FKIndirizzoMagazzino_ID unique (IDIndirizzo));

create table Noleggio accessorio (
     IDservizio char(1) not null,
     IDaccessorio char(1) not null,
     constraint IDNoleggio accessorio primary key (IDservizio, IDaccessorio));

create table Noleggio bicicletta (
     IDservizio char(1) not null,
     #Telaio char(1) not null,
     constraint IDNoleggio bicicletta primary key (IDservizio, #Telaio));

create table PACCHETTO (
     Prezzo char(1) not null,
     Sconto char(1) not null,
     IDpacchetto char(1) not null,
     CFcliente char(1) not null,
     constraint IDPACCHETTO primary key (IDpacchetto));

create table Partecipazione (
     IDpercorsoGuidato char(1) not null,
     CFguida char(1) not null,
     constraint IDPartecipazione primary key (IDpercorsoGuidato, CFguida));

create table PartnershipAttrazione (
     PIVApartner char(1) not null,
     PIVAagenzia -- Compound attribute -- not null,
     constraint IDPartnershipAttrazione primary key (PIVApartner, PIVAagenzia -- Compound attribute --));

create table PartnershipRistorante (
     PIVApartner char(1) not null,
     PIVAagenzia -- Compound attribute -- not null,
     constraint IDPartnershipRistorante primary key (PIVApartner, PIVAagenzia -- Compound attribute --));

create table PartnershipSoggiorno (
     PIVApartner char(1) not null,
     PIVAagenzia -- Compound attribute -- not null,
     constraint IDPartnershipSoggiorno primary key (PIVApartner, PIVAagenzia -- Compound attribute --));

create table PERCORSO (
     IDpercorso char(1) not null,
     Difficoltà char(1) not null,
     Nome char(1) not null,
     #Tappe char(1) not null,
     LunghezzaPercorso char(1) not null,
     IDsede char(1) not null,
     constraint IDPERCORSO primary key (IDpercorso));

create table Pernottamento (
     PIVA char(1) not null,
     IDtour char(1) not null,
     constraint IDPernottamento primary key (PIVA, IDtour));

create table Prenotazione (
     CFcliente char(1) not null,
     IDtour char(1) not null,
     constraint IDPrenotazione primary key (CFcliente, IDtour));

create table RISTORANTE (
     Recapito char(1) not null,
     Via char(1) not null,
     NomeSocio char(1) not null,
     PIVA char(1) not null,
     CostoServizio char(1) not null,
     constraint IDBUSINESS PARTNER_ID primary key (PIVA));

create table Ristorazione (
     PIVA char(1) not null,
     IDtour char(1) not null,
     constraint IDRistorazione primary key (PIVA, IDtour));

create table SEDE (
     IDsede char(1) not null,
     PIVAagenzia -- Compound attribute -- not null,
     IDIndirizzo char(1) not null,
     constraint IDSEDE_ID primary key (IDsede));

create table Sequenza (
     IDtappa char(1) not null,
     Indice char(1) not null,
     IDpercorso char(1) not null,
     constraint IDSequenza primary key (IDtappa, IDpercorso));

create table SERVIZIO (
     DataInizio -- Compound attribute -- not null,
     DataFine char(1) not null,
     CostoGiornaliero char(1) not null,
     IDservizio char(1) not null,
     tipoServizio char(1) not null,
     IDpacchetto char(1) not null,
     IDsede char(1) not null,
     IDpercorso char(1),
     constraint IDSERVIZIO primary key (IDservizio));

create table SOGGIORNO (
     Recapito char(1) not null,
     Via char(1) not null,
     NomeSocio char(1) not null,
     PIVA char(1) not null,
     CostoServizio char(1) not null,
     TipoSoggiorno char(1) not null,
     constraint IDBUSINESS PARTNER_ID primary key (PIVA));

create table TAPPA (
     Inizio char(1) not null,
     Fine char(1) not null,
     LunghezzaTappa char(1) not null,
     IDtappa char(1) not null,
     constraint IDTAPPA primary key (IDtappa));

create table TOUR (
     Destinazione char(1) not null,
     Nome char(1) not null,
     Data inizio char(1) not null,
     Data fine char(1) not null,
     Prezzo -- Compound attribute -- not null,
     IDtour char(1) not null,
     IDsede char(1) not null,
     CFtourManager char(1) not null,
     constraint IDTOUR primary key (IDtour),
     constraint IDTOUR_1 unique (Nome, Data inizio));


-- Constraints Section
-- ___________________ 

alter table ACCESSORIO add constraint FKStoccaggio accessorio
     foreign key (IDmagazzino)
     references MAGAZZINO (IDmagazzino);

alter table Acquisto biglietto add constraint FKAcq_TOU
     foreign key (IDtour)
     references TOUR (IDtour);

alter table Acquisto biglietto add constraint FKAcq_ATT
     foreign key (PIVA)
     references ATTRAZIONE (PIVA);

-- Not implemented
-- alter table AGENZIA add constraint IDAGENZIA_CHK
--     check(exists(select * from SEDE
--                  where SEDE.PIVAagenzia = PIVA)); 

-- Not implemented
-- alter table ATTRAZIONE add constraint IDBUSINESS PARTNER_CHK
--     check(exists(select * from PartnershipAttrazione
--                  where PartnershipAttrazione.PIVApartner = PIVA)); 

alter table BICICLETTA add constraint FKStoccaggioBicicletta
     foreign key (IDmagazzino)
     references MAGAZZINO (IDmagazzino);

alter table DIPENDENTE add constraint FKLavoro
     foreign key (IDsede)
     references SEDE (IDsede);

alter table Gerarchia add constraint FKSottoposto
     foreign key (CFsottoposto)
     references DIPENDENTE (CF);

alter table Gerarchia add constraint FKR
     foreign key (CFsuperiore)
     references DIPENDENTE (CF);

-- Not implemented
-- alter table INDIRIZZO add constraint IDINDIRIZZO_CHK
--     check(exists(select * from SEDE
--                  where SEDE.IDIndirizzo = IDIndirizzo)); 

alter table MAGAZZINO add constraint FKIndirizzoMagazzino_FK
     foreign key (IDIndirizzo)
     references INDIRIZZO (IDIndirizzo);

alter table MAGAZZINO add constraint FKStoccaggioM
     foreign key (IDsede)
     references SEDE (IDsede);

alter table Noleggio accessorio add constraint FKNol_SER
     foreign key (IDservizio)
     references SERVIZIO (IDservizio);

alter table Noleggio accessorio add constraint FKR
     foreign key (IDaccessorio)
     references ACCESSORIO (IDaccessorio);

alter table Noleggio bicicletta add constraint FKNol_SER
     foreign key (IDservizio)
     references SERVIZIO (IDservizio);

alter table Noleggio bicicletta add constraint FKR
     foreign key (#Telaio)
     references BICICLETTA (#Telaio);

alter table PACCHETTO add constraint FKRichiesta
     foreign key (CFcliente)
     references CLIENTE (CF);

alter table Partecipazione add constraint FKPar_DIP
     foreign key (CFguida)
     references DIPENDENTE (CF);

alter table Partecipazione add constraint FKPar_SER
     foreign key (IDpercorsoGuidato)
     references SERVIZIO (IDservizio);

alter table PartnershipAttrazione add constraint FKPar_AGE
     foreign key (PIVAagenzia -- Compound attribute --)
     references AGENZIA (PIVA -- Compound attribute --);

alter table PartnershipAttrazione add constraint FKPar_ATT
     foreign key (PIVApartner)
     references ATTRAZIONE (PIVA);

alter table PartnershipRistorante add constraint FKPar_AGE
     foreign key (PIVAagenzia -- Compound attribute --)
     references AGENZIA (PIVA -- Compound attribute --);

alter table PartnershipRistorante add constraint FKPar_RIS
     foreign key (PIVApartner)
     references RISTORANTE (PIVA);

alter table PartnershipSoggiorno add constraint FKPar_AGE
     foreign key (PIVAagenzia -- Compound attribute --)
     references AGENZIA (PIVA -- Compound attribute --);

alter table PartnershipSoggiorno add constraint FKPar_SOG
     foreign key (PIVApartner)
     references SOGGIORNO (PIVA);

alter table PERCORSO add constraint FKOffertaPercorsi
     foreign key (IDsede)
     references SEDE (IDsede);

alter table Pernottamento add constraint FKPer_TOU
     foreign key (IDtour)
     references TOUR (IDtour);

alter table Pernottamento add constraint FKPer_SOG
     foreign key (PIVA)
     references SOGGIORNO (PIVA);

alter table Prenotazione add constraint FKPre_TOU
     foreign key (IDtour)
     references TOUR (IDtour);

alter table Prenotazione add constraint FKPre_CLI
     foreign key (CFcliente)
     references CLIENTE (CF);

-- Not implemented
-- alter table RISTORANTE add constraint IDBUSINESS PARTNER_CHK
--     check(exists(select * from PartnershipRistorante
--                  where PartnershipRistorante.PIVApartner = PIVA)); 

alter table Ristorazione add constraint FKRis_TOU
     foreign key (IDtour)
     references TOUR (IDtour);

alter table Ristorazione add constraint FKRis_RIS
     foreign key (PIVA)
     references RISTORANTE (PIVA);

-- Not implemented
-- alter table SEDE add constraint IDSEDE_CHK
--     check(exists(select * from MAGAZZINO
--                  where MAGAZZINO.IDsede = IDsede)); 

-- Not implemented
-- alter table SEDE add constraint IDSEDE_CHK
--     check(exists(select * from DIPENDENTE
--                  where DIPENDENTE.IDsede = IDsede)); 

-- Not implemented
-- alter table SEDE add constraint IDSEDE_CHK
--     check(exists(select * from SERVIZIO
--                  where SERVIZIO.IDsede = IDsede)); 

-- Not implemented
-- alter table SEDE add constraint IDSEDE_CHK
--     check(exists(select * from PERCORSO
--                  where PERCORSO.IDsede = IDsede)); 

-- Not implemented
-- alter table SEDE add constraint IDSEDE_CHK
--     check(exists(select * from TOUR
--                  where TOUR.IDsede = IDsede)); 

alter table SEDE add constraint FKFiliale
     foreign key (PIVAagenzia -- Compound attribute --)
     references AGENZIA (PIVA -- Compound attribute --);

alter table SEDE add constraint FKR
     foreign key (IDIndirizzo)
     references INDIRIZZO (IDIndirizzo);

alter table Sequenza add constraint FKSeq_TAP
     foreign key (IDtappa)
     references TAPPA (IDtappa);

alter table Sequenza add constraint FKR
     foreign key (IDpercorso)
     references PERCORSO (IDpercorso);

alter table SERVIZIO add constraint FKComposizione servizio
     foreign key (IDpacchetto)
     references PACCHETTO (IDpacchetto);

alter table SERVIZIO add constraint FKOfferta servizio
     foreign key (IDsede)
     references SEDE (IDsede);

alter table SERVIZIO add constraint FKScelta
     foreign key (IDpercorso)
     references PERCORSO (IDpercorso);

-- Not implemented
-- alter table SOGGIORNO add constraint IDBUSINESS PARTNER_CHK
--     check(exists(select * from PartnershipSoggiorno
--                  where PartnershipSoggiorno.PIVApartner = PIVA)); 

alter table TOUR add constraint FKOffertaTour
     foreign key (IDsede)
     references SEDE (IDsede);

alter table TOUR add constraint FKViaggio
     foreign key (CFtourManager)
     references DIPENDENTE (CF);


-- Index Section
-- _____________ 

